/*!
 * backgroundVideo v2.0.3
 * https://github.com/linnett/backgroundVideo
 * Use HTML5 video to create an effect like the CSS property, 'background-size: cover'. Includes parallax option.
 *
 * Copyright 2014 Sam Linnett
 * @license http://www.opensource.org/licenses/mit-license.html MIT License
 * @license http://www.gnu.org/licenses/gpl.html GPL2 License
 *
 */
"use strict"; var _extends = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) { var i = arguments[t]; for (var o in i) Object.prototype.hasOwnProperty.call(i, o) && (e[o] = i[o]) } return e }, _createClass = function () { function e(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o) } } return function (t, i, o) { return i && e(t.prototype, i), o && e(t, o), t } }(), _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }; function _classCallCheck(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") } function initBackgroundVideo() { jQuery(".bg-video").backgroundVideo({ activeClass: "video-active" }) } function YouTubePopUp() { jQuery(".bla-1").YouTubePopUp({}) } function support_format_webp() { var e = document.createElement("canvas"); return e.getContext && e.getContext("2d") ? ($("body").addClass("supports-webp"), 0 == e.toDataURL("image/webp").indexOf("data:image/webp")) : ($("body").addClass("no-webp"), !1) } !function (e, t) { var i = "BackgroundVideo"; "function" == typeof define && define.amd ? define([], t(i)) : "object" === ("undefined" == typeof exports ? "undefined" : _typeof(exports)) ? module.exports = t(i) : e[i] = t(i) }(window || module || {}, (function (e) { var t = { parallax: { effect: 1.5 }, pauseVideoOnViewLoss: !1, preventContextMenu: !1, minimumVideoWidth: 400, autoplayFallback: "", onBeforeReady: function () { }, onReady: function () { } }, i = function (e, t) { e.classList ? e.classList.add(t) : e.className += " " + t }; return function () { function e(i, o) { _classCallCheck(this, e), this.element = document.querySelectorAll(i), this.options = _extends({}, t, o), this.options.browserPrexix = this.detectBrowser(), this.shimRequestAnimationFrame(), this.options.has3d = this.detect3d(), this.setWindowDimensions(); for (var n = 0; n < this.element.length; n++)this.init(this.element[n], n) } return _createClass(e, [{ key: "init", value: function (e, t) { this.el = e, this.playEvent = this.videoReadyCallback.bind(this), this.setVideoWrap(t), this.setVideoProperties(), this.insertVideos(), this.options && this.options.onBeforeReady() && this.options.onBeforeReady(), this.el.readyState > 3 ? this.videoReadyCallback() : (this.el.addEventListener("canplaythrough", this.playEvent, !1), this.el.addEventListener("canplay", this.playEvent, !1)), this.options.preventContextMenu && this.el.addEventListener("contextmenu", (function () { return !1 })) } }, { key: "videoReadyCallback", value: function () { this.el.removeEventListener("canplaythrough", this.playEvent, !1), this.el.removeEventListener("canplay", this.playEvent, !1), this.options.originalVideoW = this.el.videoWidth, this.options.originalVideoH = this.el.videoHeight, this.bindEvents(), this.requestTick(), this.options && this.options.onReady() && this.options.onReady() } }, { key: "bindEvents", value: function () { this.ticking = !1, this.options.parallax && window.addEventListener("scroll", this.requestTick.bind(this)), window.addEventListener("resize", this.requestTick.bind(this)), window.addEventListener("resize", this.setWindowDimensions.bind(this)) } }, { key: "setWindowDimensions", value: function () { this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight } }, { key: "requestTick", value: function () { this.ticking || (this.ticking = !0, window.requestAnimationFrame(this.positionObject.bind(this))) } }, { key: "positionObject", value: function () { var e = window.pageYOffset, t = this.scaleObject(), i = t.xPos, o = t.yPos; o = this.options.parallax ? e >= 0 ? this.calculateYPos(o, e) : this.calculateYPos(o, 0) : -o; var n = this.options.has3d ? "translate3d(" + i + "px, " + o + "px, 0)" : "translate(" + i + "px, " + o + "px)"; this.el.style["" + this.options.browserPrexix] = n, this.el.style.transform = n, this.ticking = !1 } }, { key: "scaleObject", value: function () { var e = this.windowWidth / this.options.originalVideoW, t = this.windowHeight / this.options.originalVideoH, i = void 0; this.options.bvVideoWrap.style.width = this.windowWidth + "px", this.options.bvVideoWrap.style.height = this.windowHeight + "px", (i = e > t ? e : t) * this.options.originalVideoW < this.options.minimumVideoWidth && (i = this.options.minimumVideoWidth / this.options.originalVideoW); var o = i * this.options.originalVideoW, n = i * this.options.originalVideoH; return this.el.style.width = o + "px", this.el.style.height = n + "px", { xPos: -parseInt((o - this.windowWidth) / 2), yPos: parseInt(n - this.windowHeight) / 2 } } }, { key: "calculateYPos", value: function (e, t) { return e = -((parseInt(this.options.bvVideoWrap.offsetTop) - t) / this.options.parallax.effect + e) } }, { key: "setVideoWrap", value: function (e) { var t = document.createElement("div"); this.options.bvVideoWrapClass = this.el.className + "-wrap-" + e, i(t, "bv-video-wrap"), i(t, this.options.bvVideoWrapClass), t.style.position = "relative", t.style.overflow = "hidden", t.style.zIndex = "10", this.el.parentNode.insertBefore(t, this.el), t.appendChild(this.el), this.options.bvVideoWrap = document.querySelector("." + this.options.bvVideoWrapClass) } }, { key: "setVideoProperties", value: function () { this.el.setAttribute("preload", "metadata"), this.el.setAttribute("loop", "true"), this.el.setAttribute("autoplay", "true"), this.el.style.position = "absolute", this.el.style.zIndex = "1"; var e = this.options.autoplayFallback; e && this.el.setAttribute("poster", e) } }, { key: "insertVideos", value: function () { for (var e = 0; e < this.options.src.length; e++) { var t = this.options.src[e].split("."), i = t[t.length - 1]; this.addSourceToVideo(this.options.src[e], "video/" + i) } } }, { key: "addSourceToVideo", value: function (e, t) { var i = document.createElement("source"); i.src = e, i.type = t, this.el.appendChild(i) } }, { key: "detectBrowser", value: function () { var e = navigator.userAgent.toLowerCase(), t = void 0; return e.indexOf("chrome") > -1 || e.indexOf("safari") > -1 ? t = "webkitTransform" : e.indexOf("firefox") > -1 ? t = "MozTransform" : -1 !== e.indexOf("MSIE") || e.indexOf("Trident/") > 0 ? t = "msTransform" : e.indexOf("Opera") > -1 && (t = "OTransform"), t } }, { key: "shimRequestAnimationFrame", value: function () { for (var e = 0, t = ["ms", "moz", "webkit", "o"], i = 0; i < t.length && !window.requestAnimationFrame; ++i)window.requestAnimationFrame = window[t[i] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[t[i] + "CancelAnimationFrame"] || window[t[i] + "CancelRequestAnimationFrame"]; window.requestAnimationFrame || (window.requestAnimationFrame = function (t, i) { var o = (new Date).getTime(), n = Math.max(0, 16 - (o - e)), a = window.setTimeout((function () { t(o + n) }), n); return e = o + n, a }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function (e) { clearTimeout(e) }) } }, { key: "detect3d", value: function () { var e, t, i = document.createElement("p"), o = { WebkitTransform: "-webkit-transform", OTransform: "-o-transform", MSTransform: "-ms-transform", MozTransform: "-moz-transform", transform: "transform" }; for (e in document.body.insertBefore(i, document.body.lastChild), o) void 0 !== i.style[e] && (i.style[e] = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)", t = window.getComputedStyle(i).getPropertyValue(o[e])); return i.parentNode.removeChild(i), void 0 !== t && "none" !== t } }]), e }() })), $.fn.YouTubePopUp = function (e) { var t = $.extend({ autoplay: 1 }, e); $(this).on("click", (function (e) { var i = $(this).attr("href"); if (i.match(/(youtube.com)/)) var o = "v=", n = 1; if (i.match(/(youtu.be)/) || i.match(/(vimeo.com\/)+[0-9]/)) o = "/", n = 3; if (i.match(/(vimeo.com\/)+[a-zA-Z]/)) o = "/", n = 5; var a = i.split(o)[n].replace(/(&)+(.*)/, ""); if (i.match(/(youtu.be)/) || i.match(/(youtube.com)/)) var s = "https://www.youtube.com/embed/" + a + "?autoplay=" + t.autoplay; if (i.match(/(vimeo.com\/)+[0-9]/) || i.match(/(vimeo.com\/)+[a-zA-Z]/)) s = "https://player.vimeo.com/video/" + a + "?autoplay=" + t.autoplay; $("body").append('<div class="YouTubePopUp-Wrap YouTubePopUp-animation"><div class="YouTubePopUp-Content"><span class="YouTubePopUp-Close"></span><iframe src="' + s + '" allowfullscreen></iframe></div></div>'), $(".YouTubePopUp-Wrap").hasClass("YouTubePopUp-animation") && setTimeout((function () { $(".YouTubePopUp-Wrap").removeClass("YouTubePopUp-animation") }), 600), $(".YouTubePopUp-Wrap, .YouTubePopUp-Close").click((function () { $(".YouTubePopUp-Wrap").addClass("YouTubePopUp-Hide").delay(515).queue((function () { $(this).remove() })) })), e.preventDefault() })), $(document).keyup((function (e) { 27 == e.keyCode && $(".YouTubePopUp-Wrap, .YouTubePopUp-Close").click() })) }, function (e, t) { var i, o = (i = [], { init: function () { t.on("load.bgVideo resize.bgVideo orientationchange.bgVideo", this.resizeHandler.bind(this)) }, resizeHandler: function () { this.isInit && e.each(i, this.resizeVideo.bind(this)) }, buildPoster: function (e, t) { t.css({ "background-image": "url(" + e.attr("poster") + ")", "background-repeat": "no-repeat", "background-size": "cover" }) }, resizeVideo: function (e) { var t = i[e], o = this.getDimensions({ videoRatio: t.ratio, maskWidth: t.$holder.outerWidth(), maskHeight: t.$holder.outerHeight() }); t.$video.css({ width: o.width, height: o.height, marginTop: o.top, marginLeft: o.left }) }, getRatio: function (e) { return e[0].videoWidth / e[0].videoHeight || e.attr("width") / e.attr("height") || e.width() / e.height() }, getDimensions: function (e) { var t = e.videoRatio, i = e.maskWidth, o = i / t; return o < e.maskHeight && (i = (o = e.maskHeight) * t), { width: i, height: o, top: (e.maskHeight - o) / 2, left: (e.maskWidth - i) / 2 } }, add: function (t, i) { var o = i.videoHolder ? t.closest(i.videoHolder) : t.parent(), n = { $video: t, $holder: o, options: i }; return t.attr("poster") && this.buildPoster(t, o), t[0].readyState ? (this.onVideoReady(n), t[0].play()) : t.one("loadedmetadata", function () { this.onVideoReady(n) }.bind(this)), t.one("play", function () { o.addClass(i.activeClass), this.makeCallback.apply(e.extend(!0, {}, this, n), ["onPlay"]) }.bind(this)), this.makeCallback.apply(e.extend(!0, {}, this, n), ["onInit"]), this }, onVideoReady: function (t) { this.isInit || (this.isInit = !0, this.init()), i.push(e.extend(t, { ratio: this.getRatio(t.$video) })), this.resizeVideo(i.length - 1) }, destroy: function (e) { (i = e ? i.filter(function (t) { var i = t.$video.is(e); return i && this.destroySingle(t), !i }.bind(this)) : i.filter(this.destroySingle)).length || (this.isInit = !1, t.off(".bgVideo")) }, destroySingle: function (e) { e.$video.removeAttr("style").removeData("BackgroundVideo")[0].pause(), e.$holder.removeClass(e.options.activeClass) }, makeCallback: function (e) { if ("function" == typeof this.options[e]) { var t = Array.prototype.slice.call(arguments); t.shift(), this.options[e].apply(this, t) } } }); e.fn.backgroundVideo = function (t) { var i = Array.prototype.slice.call(arguments), n = i[0], a = e.extend({ activeClass: "video-active", videoHolder: null }, t); return this.each((function () { var e = jQuery(this), s = e.data("BackgroundVideo"); "object" == typeof t || void 0 === t ? e.data("BackgroundVideo", o.add(e, a)) : "string" == typeof n && s && "function" == typeof s[n] && (i.shift(), s[n].apply(s, i)), e.fadeIn(800) })) }, window.BgVideoController = o }(jQuery, jQuery(window)), jQuery((function () { initBackgroundVideo(), YouTubePopUp() })), $(document).ready((function () { $("#paging a, .smooth-scroll").on("click", (function (e) { if ("" !== this.hash) { e.preventDefault(); var t = this.hash; $("html, body").animate({ scrollTop: $(t).offset().top }, 800, (function () { window.location.hash = t })) } })) })), $(document).ready((function () { $(".nav-tabs a").on("click", (function () { var e = $(this).attr("aria-controls"), t = $(".tab-pane#" + e); $(".tab-pane").not(t).hide(), $(t).show() })) })), $(".load-more").click((function () { $("html,body").animate({ scrollTop: $(".collapse.in").offset().top }, "slow") })), function () { function e(e) { var t = $(e), i = t.offset().top, o = t.height(), n = i - o; $(window).scroll((function () { var e, o = $(this).scrollTop(); o >= n && (e = "translateY(" + -(o - i) / 2 + "px)", t.find(".parallax").css({ "-moz-transform": e, "-webkit-transform": e, transform: e })), o })) } e("#sectionTalk"), e("#sectionInfo"), e("#sectionOffer"), e("#sectionCases"), e("#sectionGallery"), e("#sectionTeam"), e(".bg-gallery"), e("#sectionExamples"), $(".nav-tabs a").on("click", (function () { var e = $(this).attr("aria-controls"), t = $(this).parent(), i = t.hasClass("active"), o = $(".tab-pane#" + e); i || ($(".tab-pane").not(o).removeClass("active"), $(".nav-tabs li").not(t).removeClass("active"), t.addClass("active"), o.addClass("active")) })) }(), document.addEventListener("DOMContentLoaded", (function () { var e; if ("IntersectionObserver" in window) { e = document.querySelectorAll(".background-image-lazy"); var t = new IntersectionObserver((function (e, i) { e.forEach((function (e) { if (e.isIntersecting) { var i = e.target; i.classList.remove("background-image-lazy"), t.unobserve(i) } })) })); e.forEach((function (e) { t.observe(e) })) } else { var i; function o() { i && clearTimeout(i), i = setTimeout((function () { var t = window.pageYOffset; e.forEach((function (e) { e.offsetTop < window.innerHeight + t && (e.src = e.dataset.src, e.classList.remove("background-image-lazy")) })), 0 === e.length && (document.removeEventListener("scroll", o), window.removeEventListener("resize", o), window.removeEventListener("orientationChange", o)) }), 20) } e = document.querySelectorAll(".background-image-lazy"), document.addEventListener("scroll", o), window.addEventListener("resize", o), window.addEventListener("orientationChange", o) } }));